<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<!-- Spring的配置文件，这里主要配置和业务逻辑有关的 -->
	<!-- 引入jdbc配置文件 -->
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:properties/*.properties</value>
				<!--要是有多个配置文件，只需在这里继续添加即可 -->
			</list>
		</property>
	</bean>

	<!-- 配置数据源 -->
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<!-- 使用properties来配置 -->
		<property name="driverClassName">
			<value>${jdbc_driverClassName}</value>
		</property>
		<property name="url">
			<value>${jdbc_url}</value>
		</property>
		<property name="username">
			<value>${jdbc_username}</value>
		</property>
		<property name="password">
			<value>${jdbc_password}</value>
		</property>
	</bean>
	
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
	     <property name="dataSource" ref="dataSource"></property>
	</bean>
	 
	<!--================== 配置和MyBatis的整合=============== -->
	<!-- 配置和MyBatis的整合 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="mapperLocations" value="classpath:com/dazhumei/love/*/dao/impl/*.xml" />
	</bean>

	<!-- 自动扫描了所有的XxxxMapper.xml对应的mapper接口文件，这样就不用一个一个手动配置Mpper的映射了，只要Mapper接口类和Mapper映射文件对应起来就可以了。 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.dazhumei.love.*.dao" />
	</bean>
	
	<!-- 自动扫描注解的bean -->
	<context:component-scan base-package="com.dazhumei.love.system,com.dazhumei.love.*.service" />
	
	<!-- 配置一个可以执行批量的sqlSession -->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"></constructor-arg>
		<constructor-arg name="executorType" value="BATCH"></constructor-arg>
	</bean>
	<!--=============================================  -->

	<!-- ===============事务控制的配置 ================-->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<!--控制住数据源  -->
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	<!--开启基于注解的事务，使用xml配置形式的事务（必要主要的都是使用配置式）  -->
	<aop:config>
		<!-- 切入点表达式 -->
		<aop:pointcut expression="execution(* com.dazhumei.love.*.service..*(..))" id="txPoint"/>
		<!-- 配置事务增强 -->
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPoint"/>
	</aop:config>
	
	<!--配置事务增强，事务如何切入  -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- 所有方法都是事务方法 -->
			<tx:method name="*"/>
			<!--以get开始的所有方法  -->
			<tx:method name="get*" read-only="true"/>
		</tx:attributes>
	</tx:advice>
	
	<!-- Spring配置文件的核心点（数据源、与mybatis的整合，事务控制） -->
	 
 	<!-- jedis 配置 --> 
<!-- 	<bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig"> -->
<!-- 		<property name="maxIdle" value="${redis.maxIdle}" /> -->
<!-- 		<property name="maxWaitMillis" value="${redis.maxWait}" /> -->
<!-- 		<property name="testOnBorrow" value="${redis.testOnBorrow}" /> -->
<!-- 	</bean> -->

 	<!-- redis服务器中心 --> 
<!-- 	<bean id="connectionFactory" -->
<!-- 		class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"> -->
<!-- 		<property name="poolConfig" ref="poolConfig" /> -->
<!-- 		<property name="port" value="${redis.port}" /> -->
<!-- 		<property name="hostName" value="${redis.host}" /> -->
 		<!-- <property name="password" value="${redis.password}" /> --> 
<!-- 		<property name="timeout" value="${redis.timeout}"></property> -->
<!-- 	</bean> -->
<!-- 	<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate"> -->
<!-- 		<property name="connectionFactory" ref="connectionFactory" /> -->
<!-- 		<property name="keySerializer"> -->
<!-- 			<bean -->
<!-- 				class="org.springframework.data.redis.serializer.StringRedisSerializer" /> -->
<!-- 		</property> -->
<!-- 		<property name="valueSerializer"> -->
<!-- 			<bean -->
<!-- 				class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" /> -->
<!-- 		</property> -->
<!-- 	</bean> -->
	
<!-- 	<bean id="stringRedisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate"> -->
<!-- 		<property name="connectionFactory" ref="connectionFactory" /> -->
<!-- 	</bean> -->

	
</beans>